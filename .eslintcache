[{"/home/musigma/Documents/vvs/mygit/js-quiz/src/index.js":"1","/home/musigma/Documents/vvs/mygit/js-quiz/src/App.js":"2","/home/musigma/Documents/vvs/mygit/js-quiz/src/reportWebVitals.js":"3","/home/musigma/Documents/vvs/mygit/js-quiz/src/landingPage/landingpage.js":"4","/home/musigma/Documents/vvs/mygit/js-quiz/src/question/question.js":"5","/home/musigma/Documents/vvs/mygit/js-quiz/src/result/resultModal.js":"6"},{"size":501,"mtime":1609167693000,"results":"7","hashOfConfig":"8"},{"size":399,"mtime":1613849425000,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1609164757000,"results":"10","hashOfConfig":"8"},{"size":336,"mtime":1613937073000,"results":"11","hashOfConfig":"8"},{"size":3707,"mtime":1614453481679,"results":"12","hashOfConfig":"8"},{"size":785,"mtime":1614453468559,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1vd9bxt",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/musigma/Documents/vvs/mygit/js-quiz/src/index.js",[],["28","29"],"/home/musigma/Documents/vvs/mygit/js-quiz/src/App.js",[],"/home/musigma/Documents/vvs/mygit/js-quiz/src/reportWebVitals.js",[],"/home/musigma/Documents/vvs/mygit/js-quiz/src/landingPage/landingpage.js",[],"/home/musigma/Documents/vvs/mygit/js-quiz/src/question/question.js",["30"],"import React, { useEffect } from \"react\";\nimport { ResultModal } from \"../result/resultModal\";\nimport \"./question.scss\";\n\nfunction Question() {\n  const [data, setData] = React.useState([]);\n  const [selectedQues, setSelectedQues] = React.useState(null);\n  const [result, setResult] = React.useState(null);\n\n  useEffect(() => {\n    fetch(\"/questionsList.json\")\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        data.forEach((element) => {\n          element[\"selectedOption\"] = null;\n          element[\"currentQues\"] = false;\n          element[\"result\"] = null;\n        });\n        setData(data);\n        setSelectedQues(data[0]);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const _nextQuestion = () => {\n    if (!selectedQues.result) return;\n    setSelectedQues(data[selectedQues.id]);\n  };\n\n  const _onSelect = (opt, i) => {\n    if (selectedQues.result) return;\n\n    data.forEach((quesObj) => {\n      if (quesObj.id === selectedQues.id) {\n        quesObj[\"selectedOption\"] = i;\n      }\n    });\n\n    let l_result = i === selectedQues[\"answer_index\"] ? \"P\" : \"F\";\n\n    if (l_result === \"P\") {\n      setSelectedQues({\n        ...selectedQues,\n        greenIndex: i,\n        redIndex: null,\n        result: l_result,\n        selectedOption: i,\n      });\n    } else {\n      setSelectedQues({\n        ...selectedQues,\n        greenIndex: selectedQues[\"answer_index\"],\n        redIndex: i,\n        result: l_result,\n        selectedOption: i,\n      });\n    }\n  };\n\n  const _calcResult = () => {\n    let obj = {\n      score: data.filter((ele) => ele.answer_index === ele.selectedOption)\n        .length,\n      total: data.length,\n    };\n    setResult(obj);\n  };\n\n  const _getClassName = (i) => {\n    let className = \"\";\n    className = selectedQues.result ? \"selectionMade\":\"\";\n    if (selectedQues[\"greenIndex\"] === i) {\n      className += \" green\";\n    } else if (selectedQues[\"redIndex\"] === i) {\n      className += \" red\";\n    }\n    return className;\n  };\n\n  const _getNextContainer = () => {\n    if (selectedQues.id === data.length) {\n      return (\n        <div\n          className={selectedQues.result ? \"finish\" : \"finish notAllowed\"}\n          onClick={_calcResult}\n        >\n          Finish!\n        </div>\n      );\n    } else {\n      return (\n        <div\n          className={selectedQues.result ? \"nextQues\" : \"nextQues notAllowed\"}\n          onClick={_nextQuestion}\n        >\n          <img src=\"/icons/rightArrow.png\" alt=\"Next\" />\n          <div>Next</div>\n        </div>\n      );\n    }\n  };\n\n  if (selectedQues) {\n    return (\n      <div className=\"ques-container height100\">\n        <div className=\"img-wrapper flex\">\n          <img src={selectedQues.question_image} />\n        </div>\n        <div className=\"options\">\n          {selectedQues.options.map((option, index) => {\n            return (\n              <div key={index}>\n                <span className=\"no\">{index + 1 + \")\"}</span>\n                <button\n                  key={index}\n                  onClick={() => _onSelect(option, index)}\n                  className={_getClassName(index)}\n                >\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                  <span></span>\n                  {option}\n                </button>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"quizStatus\">\n          <span>{selectedQues.id}</span> / {data.length}\n        </div>\n        {_getNextContainer()}\n        {result && <ResultModal result={result} />}\n      </div>\n    );\n  } else return <div className=\"loading\">Loading...</div>;\n}\n\nexport default Question;\n","/home/musigma/Documents/vvs/mygit/js-quiz/src/result/resultModal.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":111,"column":11,"nodeType":"37","endLine":111,"endColumn":52},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]